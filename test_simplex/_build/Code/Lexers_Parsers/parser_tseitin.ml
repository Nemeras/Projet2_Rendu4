type token =
  | VAR of (int)
  | LPAREN
  | RPAREN
  | IMPLY
  | AND
  | OR
  | NOT
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "Code/Lexers_Parsers/parser_tseitin.mly"
open General.Tseitin
# 16 "Code/Lexers_Parsers/parser_tseitin.ml"
let yytransl_const = [|
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* IMPLY *);
  261 (* AND *);
  262 (* OR *);
  263 (* NOT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\002\000\003\000\003\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\000\000\000\000\002\000\009\000\000\000\
\000\000\005\000\000\000\000\000\000\000\001\000\004\000\000\000\
\007\000\000\000"

let yydgoto = "\002\000\
\007\000\008\000"

let yysindex = "\255\255\
\018\000\000\000\000\000\005\255\005\255\000\000\000\000\001\000\
\016\255\000\000\005\255\005\255\005\255\000\000\000\000\019\255\
\000\000\255\254"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\008\000"

let yygindex = "\000\000\
\253\255\254\255"

let yytablesize = 281
let yytable = "\001\000\
\006\000\009\000\010\000\012\000\014\000\003\000\004\000\006\000\
\016\000\017\000\018\000\005\000\000\000\000\000\008\000\000\000\
\000\000\006\000\015\000\011\000\012\000\013\000\011\000\012\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\000\000\011\000\012\000\013\000\005\000\
\006\000\006\000\006\000\006\000\000\000\006\000\006\000\008\000\
\008\000\008\000\003\000\004\000\000\000\008\000\000\000\000\000\
\005\000"

let yycheck = "\001\000\
\000\000\004\000\005\000\005\001\008\000\001\001\002\001\000\000\
\011\000\012\000\013\000\007\001\255\255\255\255\000\000\255\255\
\255\255\000\000\003\001\004\001\005\001\006\001\004\001\005\001\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\001\001\002\001\003\001\004\001\255\255\006\001\007\001\001\001\
\002\001\003\001\001\001\002\001\255\255\007\001\255\255\255\255\
\007\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  IMPLY\000\
  AND\000\
  OR\000\
  NOT\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int General.Tseitin.form) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int General.Tseitin.formlist) in
    Obj.repr(
# 26 "Code/Lexers_Parsers/parser_tseitin.mly"
                 ( (fst _1)::(fst _2), max (snd _1) (snd _2) )
# 159 "Code/Lexers_Parsers/parser_tseitin.ml"
               : int General.Tseitin.formlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "Code/Lexers_Parsers/parser_tseitin.mly"
         ( [], 0 )
# 165 "Code/Lexers_Parsers/parser_tseitin.ml"
               : int General.Tseitin.formlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 31 "Code/Lexers_Parsers/parser_tseitin.mly"
         ( Lit (_1,0), _1 )
# 172 "Code/Lexers_Parsers/parser_tseitin.ml"
               : int General.Tseitin.form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int General.Tseitin.form) in
    Obj.repr(
# 32 "Code/Lexers_Parsers/parser_tseitin.mly"
                      ( _2 )
# 179 "Code/Lexers_Parsers/parser_tseitin.ml"
               : int General.Tseitin.form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int General.Tseitin.form) in
    Obj.repr(
# 33 "Code/Lexers_Parsers/parser_tseitin.mly"
             ( Not (fst _2,0), snd _2 )
# 186 "Code/Lexers_Parsers/parser_tseitin.ml"
               : int General.Tseitin.form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int General.Tseitin.form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int General.Tseitin.form) in
    Obj.repr(
# 34 "Code/Lexers_Parsers/parser_tseitin.mly"
                 ( Or (fst _1, fst _3, 0), max (snd _1) (snd _3) )
# 194 "Code/Lexers_Parsers/parser_tseitin.ml"
               : int General.Tseitin.form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int General.Tseitin.form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int General.Tseitin.form) in
    Obj.repr(
# 35 "Code/Lexers_Parsers/parser_tseitin.mly"
                  ( And (fst _1, fst _3, 0), max (snd _1) (snd _3) )
# 202 "Code/Lexers_Parsers/parser_tseitin.ml"
               : int General.Tseitin.form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int General.Tseitin.form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int General.Tseitin.form) in
    Obj.repr(
# 36 "Code/Lexers_Parsers/parser_tseitin.mly"
                   ( Or (Not (fst _1,0), fst _3, 0), max (snd _1) (snd _3) )
# 210 "Code/Lexers_Parsers/parser_tseitin.ml"
               : int General.Tseitin.form))
(* Entry formula *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let formula (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : int General.Tseitin.formlist)
